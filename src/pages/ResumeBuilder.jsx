import { useNavigate } from '@solidjs/router';
import { createSignal, Show, For, onCleanup } from 'solid-js';
import { createEvent } from '../supabaseClient';

function ResumeBuilder() {
  const navigate = useNavigate();

  const [personalInfo, setPersonalInfo] = createSignal({
    name: '',
    email: '',
    phone: '',
    address: '',
  });

  const [educations, setEducations] = createSignal([]);
  const [experiences, setExperiences] = createSignal([]);
  const [selectedSkills, setSelectedSkills] = createSignal([]);
  const [languages, setLanguages] = createSignal([]);
  const [selectedHobbies, setSelectedHobbies] = createSignal([]);
  const [loading, setLoading] = createSignal(false);

  let isMounted = true;
  onCleanup(() => {
    isMounted = false;
  });

  const degreeLevels = ['ุจูุงููุฑููุณ', 'ูุงุฌุณุชูุฑ', 'ุฏูุชูุฑุงู', 'ุฏุจููู', 'ุซุงูููุฉ'];
  const fieldsOfStudy = ['ููุฏุณุฉ', 'ุนููู ุงูุญุงุณูุจ', 'ุฅุฏุงุฑุฉ ุงูุฃุนูุงู', 'ุงูุทุจ', 'ุงูุตูุฏูุฉ', 'ุงูุญููู', 'ุงูุชุณููู', 'ุงูุชุตููู', 'ุชุนููู', 'ุฃุฎุฑู'];

  const commonSkills = [
    'ุงูุนูู ุงูุฌูุงุนู',
    'ุงูุงุชุตุงู',
    'ุญู ุงููุดููุงุช',
    'ุฅุฏุงุฑุฉ ุงูููุช',
    'ุงูููุงุฏุฉ',
    'ุงูุฅุจุฏุงุน',
    'ุงููุฑููุฉ',
    'ุงูุงูุชูุงู ุจุงูุชูุงุตูู',
    'ุงูุจุฑูุฌุฉ',
    'ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน',
    'ุงูุชุณููู',
    'ุงููุจูุนุงุช',
  ];

  const proficiencyLevels = ['ูุจุชุฏุฆ', 'ูุชูุณุท', 'ูุชูุฏู', 'ุทููู', 'ุงููุบุฉ ุงูุฃู'];

  const commonHobbies = [
    'ุงููุฑุงุกุฉ',
    'ุงููุชุงุจุฉ',
    'ุงูุฑูุงุถุฉ',
    'ุงูุณูุฑ',
    'ุงูุฑุณู',
    'ุงูุชุตููุฑ',
    'ุงูููุณููู',
    'ุงูุทุจุฎ',
    'ุงููุณุฑุญ',
    'ุงูุชุทูุน',
  ];

  const addEducation = () => {
    setEducations([...educations(), { degreeLevel: '', fieldOfStudy: '', institution: '', graduationYear: '' }]);
  };

  const removeEducation = (index) => {
    setEducations(educations().filter((_, i) => i !== index));
  };

  const updateEducation = (index, field, value) => {
    const updated = [...educations()];
    updated[index][field] = value;
    setEducations(updated);
  };

  const addExperience = () => {
    setExperiences([...experiences(), { jobTitle: '', company: '', duration: '', description: '' }]);
  };

  const removeExperience = (index) => {
    setExperiences(experiences().filter((_, i) => i !== index));
  };

  const updateExperience = (index, field, value) => {
    const updated = [...experiences()];
    updated[index][field] = value;
    setExperiences(updated);
  };

  const addLanguage = () => {
    setLanguages([...languages(), { language: '', proficiency: '' }]);
  };

  const removeLanguage = (index) => {
    setLanguages(languages().filter((_, i) => i !== index));
  };

  const updateLanguage = (index, field, value) => {
    const updated = [...languages()];
    updated[index][field] = value;
    setLanguages(updated);
  };

  const toggleSkill = (skill) => {
    if (selectedSkills().includes(skill)) {
      setSelectedSkills(selectedSkills().filter(s => s !== skill));
    } else {
      setSelectedSkills([...selectedSkills(), skill]);
    }
  };

  const toggleHobby = (hobby) => {
    if (selectedHobbies().includes(hobby)) {
      setSelectedHobbies(selectedHobbies().filter(h => h !== hobby));
    } else {
      setSelectedHobbies([...selectedHobbies(), hobby]);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    const educationText = educations().map((edu, index) => `
      ุงูุชุนููู ${index + 1}:
      ุงูุฏุฑุฌุฉ ุงูุนูููุฉ: ${edu.degreeLevel}
      ุงูุชุฎุตุต: ${edu.fieldOfStudy}
      ุงููุคุณุณุฉ ุงูุชุนููููุฉ: ${edu.institution}
      ุณูุฉ ุงูุชุฎุฑุฌ: ${edu.graduationYear}
    `).join('\n');

    const experienceText = experiences().map((exp, index) => `
      ุงูุฎุจุฑุฉ ${index + 1}:
      ุงููุณูู ุงููุธููู: ${exp.jobTitle}
      ุงูุดุฑูุฉ: ${exp.company}
      ุงููุฏุฉ: ${exp.duration}
      ุงููุตู: ${exp.description}
    `).join('\n');

    const languagesText = languages().map((lang, index) => `
      ุงููุบุฉ ${index + 1}:
      ุงููุบุฉ: ${lang.language}
      ูุณุชูู ุงูุฅุชูุงู: ${lang.proficiency}
    `).join('\n');

    const skillsText = selectedSkills().join(', ');

    const hobbiesText = selectedHobbies().join(', ');

    const prompt = `
      ุฃูุฏ ููู ุฅูุดุงุก ุณูุฑุฉ ุฐุงุชูุฉ ุงุญุชุฑุงููุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุจูุงุกู ุนูู ุงููุนูููุงุช ุงูุชุงููุฉ:
      ุงูุงุณู: ${personalInfo().name}
      ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ${personalInfo().email}
      ุฑูู ุงููุงุชู: ${personalInfo().phone}
      ุงูุนููุงู: ${personalInfo().address}
      ุงูุชุนููู:
      ${educationText}
      ุงูุฎุจุฑุงุช:
      ${experienceText}
      ุงูููุงุฑุงุช: ${skillsText}
      ุงููุบุงุช:
      ${languagesText}
      ุงูููุงูุงุช:
      ${hobbiesText}
      ุงูุฑุฌุงุก ุชูุณูู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ ุจุดูู ุฌูุฏ ูููุงุณุจ.
    `;

    try {
      const result = await createEvent('chatgpt_request', {
        prompt: prompt,
        response_type: 'text',
      });

      if (isMounted) {
        setLoading(false);
        navigate('/resume-result', {
          state: {
            resumeContent: result || 'ูู ูุชู ุงูุญุตูู ุนูู ุณูุฑุฉ ุฐุงุชูุฉ.',
          },
        });
      }
    } catch (error) {
      console.error('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ:', error);
      if (isMounted) {
        setLoading(false);
        navigate('/resume-result', {
          state: {
            resumeContent: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ.',
          },
        });
      }
    }
  };

  return (
    <div class="flex flex-col items-center p-4 h-full text-gray-800 pt-8 pb-16">
      <button
        onClick={() => navigate(-1)}
        class="self-start mb-4 text-2xl cursor-pointer"
      >
        ๐
      </button>
      <h1 class="text-4xl font-bold text-purple-600 mb-6">ููุดุฆ ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ</h1>

      <form onSubmit={handleSubmit} class="w-full max-w-lg space-y-4">
        {/* ูุนูููุงุช ุดุฎุตูุฉ */}
        <div>
          <h2 class="text-2xl font-semibold mb-2 text-purple-600">ุงููุนูููุงุช ุงูุดุฎุตูุฉ</h2>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2">ุงูุงุณู ุงููุงูู</label>
            <input
              type="text"
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent box-border"
              placeholder="ุฃุฏุฎู ุงุณูู ุงููุงูู"
              required
              value={personalInfo().name}
              onInput={(e) => setPersonalInfo({ ...personalInfo(), name: e.target.value })}
            />
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</label>
            <input
              type="email"
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent box-border"
              placeholder="ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
              required
              value={personalInfo().email}
              onInput={(e) => setPersonalInfo({ ...personalInfo(), email: e.target.value })}
            />
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2">ุฑูู ุงููุงุชู</label>
            <input
              type="tel"
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent box-border"
              placeholder="ุฃุฏุฎู ุฑูู ูุงุชูู"
              required
              value={personalInfo().phone}
              onInput={(e) => setPersonalInfo({ ...personalInfo(), phone: e.target.value })}
            />
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2">ุงูุนููุงู</label>
            <input
              type="text"
              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent box-border"
              placeholder="ุฃุฏุฎู ุนููุงูู"
              required
              value={personalInfo().address}
              onInput={(e) => setPersonalInfo({ ...personalInfo(), address: e.target.value })}
            />
          </div>
        </div>
        {/* ... ุจุงูู ุงููููุฐุฌ (ุงูุชุนูููุ ุงูุฎุจุฑุงุชุ ุงูููุงุฑุงุชุ ุงููุบุงุชุ ุงูููุงูุงุช) ... */}
        {/* ุฒุฑ ุงูุฅุฑุณุงู */}
        <button
          type="submit"
          class="w-full px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
          disabled={loading()}
        >
          <Show when={!loading()} fallback="ุฌุงุฑู ุงูุฅูุดุงุก...">
            ุฅูุดุงุก ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ
          </Show>
        </button>
      </form>
    </div>
  );
}

export default ResumeBuilder;